<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[var ya; stepanova]]></title>
        <description><![CDATA[Front end developer, blogger and cats lover.]]></description>
        <link>http://varya.me/</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 21 Nov 2016 08:48:58 GMT</lastBuildDate>
        <atom:link href="http://varya.me//en/feed.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Varya Stepanova]]></author>
        <pubDate>Mon, 21 Nov 2016 08:48:43 GMT</pubDate>
        <item>
            <title><![CDATA[Simple yet promising structure for React/Redux project]]></title>
            <description><![CDATA[<p>Two weeks ago, I have started a new project of migrating a large website to React. Although this is not developing from
scratch but refactoring, there still was a great chance to reconsider the project file structure in its client part.</p>
<p>As a proof-of-concept, I have chosen a pair of components: shopping cart and adding button. This is e-commerce what we
are building here :-) My initial goal was to create simple components and demonstrate their reusing as well as introduce
Redux as a glue to the components in the data area. As a result, I think I provided a nice and neat structure which
helps a developer to understand what serves what. On the other hand, I tried to keep it simple. In the beginning, there
is no need in overcomplicated.</p>
<p><excerpt/>
In this post, I present the initial state of the project structure, extracted from the working repository. In our actual
project, it has already evolved to use other patterns and helping tools. I hope I will make it to present these changes
in the following posts.</p>
<p>The demonstrative extract is a public repository at
<a href="https://github.com/varya/react-redux-project">varya/react-redux-project</a>. To run it locally, you need to check it out
run <code>npm install</code> and then <code>npm start</code>. You will see a page, similar to what is <a href="http://varya.me/react-redux-project/index.html">hosted
here</a>.</p>
<p>In this page, two React components are sharing one data store. You can see how the number in <code>Cart</code> increments every
time you click a button.</p>
<p>Now, let&#39;s have a look at the project file structure. You will find all the source files in <code>src</code> folder in the
repository:</p>
<pre class="highlight"><code class="hljs stylus">src/
  components/
    AddToCartButton/
    Button/
    Cart/
    Icon/
  containers/
    AddToCartButton/
  redux/
    modules/
      cart<span class="hljs-class">.js</span>
      reducer<span class="hljs-class">.js</span>
  index<span class="hljs-class">.js</span>
</code></pre><p>The <code>components</code> folder is dedicated for representative, &quot;static&quot; components. The components can reuse one another. For
example, in the project, the <code>AddToCartButton</code> wraps the <code>Button</code>.</p>
<p>On the file system, each component is a folder. Inside there are usually <code>index.js</code>, almost always <code>style.css</code> and other
files such as images if needed. I used to name the JavaScript file by the component name, like <code>Button.js</code> and
<code>Button.css</code>. But in this
project, I tried more unified structure. It turned out to be very handy, especially in the beginning, when we make a lot
of small components. Now the component folders can be copied and renamed easily.</p>
<p>Next folder is named <code>containers</code>. It is for the wrappers around the components. These wrappers often have the same
names. Unlike representative components, which only know about how to render the data, the containers are for getting
the data and passing it down. Technically the containers are also React components, but they are decorated with
<code>connect</code> from Redux. This provides the glue for view and data. You can see typical container here:
<a href="https://github.com/varya/react-redux-project/blob/eb0e7a24ba8a723ce373d3763c299b95661fdfc6/src/containers/AddToCartButton/index.js">src/containers/AddToCartButton</a></p>
<p>For the data, the containers use reducers from Redux. The project is made in a hope for future growing. This is why the
reducers are divided into modules (meaning, separate files) according to what are the entities they operate with. They
are stores in <a href="https://github.com/varya/react-redux-project/tree/master/src/redux/modules">src/modules</a> directory. It
has yet one module and the
<a href="https://github.com/varya/react-redux-project/blob/master/src/redux/modules/reducer.js">src/modules/reducer.js</a> which
combines them all.</p>
<p>Take a look at the module code.</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">const</span> ADD = <span class="hljs-string">'cart/ADD'</span>;

<span class="hljs-keyword">const</span> initialState = {
  goods: <span class="hljs-number">0</span>
};

export <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cart</span><span class="hljs-params">(state = initialState, action = {})</span> </span>{

  <span class="hljs-keyword">switch</span> (action.type) {
    <span class="hljs-keyword">case</span> ADD:
      <span class="hljs-keyword">return</span> {
        ...state,
        goods: ++state.goods
      }
    <span class="hljs-keyword">default</span>:
      <span class="hljs-keyword">return</span> state;
  }

}

export <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">return</span> {
    type: ADD
  }
}
</code></pre>
<p>This style of organizing reducers is called <a href="https://github.com/erikras/ducks-modular-redux">Ducks</a>.</p>
<p>The entering file of the application <a href="https://github.com/varya/react-redux-project/blob/master/src/index.js">src/index.js</a>
takes the components or containers, makes the Redux store and creates the app with them. In here, you can also decorate
representative components with Redux&#39; <code>connect</code> if they do not have a special container.</p>
<p>As the following weeks showed, this structure turned out to be very convenient. Of course, it has evolved more. I hope
to cover the changes in the next posts.</p>
]]></description>
            <link>http://varya.me//en/posts/react-redux-simple-project</link>
            <guid isPermaLink="true">http://varya.me//en/posts/react-redux-simple-project</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 21 Nov 2016 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Week 44, 2016]]></title>
            <description><![CDATA[<p>First thing first, I&#39;m staring weekly posts about findings that are somehow related to work. This is a mature but not yet
implemented idea. Although, a friend of mine <a href="https://iamstarkov.com/">Vladimir Starkov sometimes practises the same</a>.</p>
<p>In this issue there are tips on organizing Google Calendar, nice project management addition for GitHub, Styleguide
solutions for React projects and a couple of good reads.</p>
<excerpt/>


<h2 id="week-numbers-in-google-calendar">Week numbers in Google calendar</h2>
<p>In Finland, the week numbers are widely used. People easily make agreements on let&#39;s say &quot;the beginning on week 45&quot;. For
this purpose and also for the actual weekly reports, I have subscribed for a special Google calendar
which provides a small week number at the top right corner or every monday.</p>
<p><img src="/posts/week-44-2016/CalendarWeekNumbers3.png" alt=""></p>
<p>Here are the instructions:
<a href="http://www.daimto.com/how-to-add-week-numbers-to-your-google-calendar/">http://www.daimto.com/how-to-add-week-numbers-to-your-google-calendar/</a>.</p>
<h2 id="zenhub-a-github-issue-tracker">ZenHub — a GitHub issue tracker</h2>
<p><a href="https://www.zenhub.com/">ZenHub</a> is an add-on, which makes different boards with columns on top of GitHub issues.</p>
<p><img src="/posts/week-44-2016/zenhub-task-board.jpg" alt=""></p>
<p>It looks like a competitor of embedded <a href="https://github.com/blog/2256-a-whole-new-github-universe-announcing-new-tools-forums-and-features">GitHub
Projects</a> but with
more features.</p>
<h2 id="react-storybook-and-react-styleguidist">React Storybook and React Styleguidist</h2>
<p>In the project I have started on Monday, we faced the need to document React components. There were two candidates
among the tools to use — <a href="https://getstorybook.io/">React Storybook</a> and <a href="https://github.com/sapegin/react-styleguidist">React
Styleguidist</a>. Both with their pros and cons.</p>
<p>By now, we ended up with Styleguidist. Anyway, this is not a mature solution, and we can probably think back.</p>
<p>The Storybook was super easy to install. However, it requires more typing for every story and does not read the props out
of the documenting comments.</p>
<p>The Styleguidist was a tricky thing to run. Everything goes smoothly at simple projects but this was not our case. There
were some difficulties with the pages wrapped into <code>react-hot-loader</code> container. I solved it by introducing proper file
structure. We should have it anyway. Now, there is a dedicated folder for the components and we taught the Styleguidist
to work with it.</p>
<p>As a piece of advice to friends, I can give the following: try to reuse your normal webpack config and not to write another one
in the <code>styleguide.config.js</code> file. It will save you some time when changing the building process. This is our version:</p>
<pre class="highlight"><code class="hljs lua">const siteWebpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./webpack.config.js"</span>);

<span class="hljs-built_in">module</span>.exports = {
  title: <span class="hljs-string">'My Great Style Guide'</span>,
  components: <span class="hljs-string">'./src/components/**/*.jsx'</span>,
  updateWebpackConfig(webpackConfig) {
    siteWebpack.<span class="hljs-built_in">module</span>.loaders.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(loader)</span></span> {
      webpackConfig.<span class="hljs-built_in">module</span>.loaders.push(loader);
    });
    webpackConfig.postcss = siteWebpack.postcss;

    <span class="hljs-keyword">return</span> webpackConfig;
  },
};
</code></pre><h2 id="how-to-write-a-git-commit-message">How to Write a Git Commit Message</h2>
<p>The article <a href="http://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message</a> by Chris Beams has already
turned 2 years but still actual. I have read it previously and try to follow. But I do not recollect me shring the link
to it. So, here it is.</p>
<h2 id="4-different-kinds-of-react-component-style">4 different kinds of React component style</h2>
<p>Setting up a new project I have scanned a lot of recent articles about React. One of them is <a href="https://www.peterbe.com/plog/4-different-kinds-of-react-component-styles">4 different kinds of React
component style</a>. I had doubts if to put it in
this blog post or not because it did not tell me much new. On the other hand, it&#39;s not a long read and finely summarizes
different kinds of React components.</p>
]]></description>
            <link>http://varya.me//en/posts/week-44-2016</link>
            <guid isPermaLink="true">http://varya.me//en/posts/week-44-2016</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Tue, 08 Nov 2016 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Living SC5 Styleguide, the next level]]></title>
            <description><![CDATA[<p>When it comes to the large web applications, we often operate with complex components. Such components are not just CSS
styles for the pieces of an interface but also their JavaScript interactions and templates. As documentation, the style
guide should reflect them all. In other words, the components on the style guide&#39;s pages should be the same living as in
production.</p>
<excerpt/>

<p>At my recent project, we have been using <a href="http://styleguide.sc5.io/">SC5 Style Guide</a> in its simplest way - documenting
the view of the components. For that, we provided the needed HTML in the KSS code and so has received the rendered
component library.</p>
<p>However, in the production code, these components appeared at the pages as a result of some templating transformations.
Also, the project is massive and fast-developed, and the changes to the templates happened all the time. As a result,
the style guide was always out of date.</p>
<p>Moreover, much functionality could not be illustrated with plain HTML.
To be rendered correctly and interact with a user, it also needs its JavaScript code.</p>
<p>At this project, I have solved the problem using advanced configuration of SC5 Style Guide. Below you can find the
tricks and explanation.</p>
<h2 id="living-javascript-components">Living JavaScript components</h2>
<p>Usually, a piece of an interface (often called &#39;a component&#39;) is a combination of HTML, CSS, and JavaScript. With the
basic features if SC5 Style Guide you can easily document HTML and CSS. However, applying JavaScript to the components
requires an additional configuration.</p>
<p>In SC5 Styleguide, you can provide additional tags into the <code>&lt;head&gt;</code> section of the generated style guide&#39;s page. They
can be <code>&lt;script&gt;</code> tags linking the JavaScript you need.</p>
<p>Assuming this, you can bundle the necessary JavaScript into one file, and link it to the style guide&#39;s pages, like this:</p>
<pre class="highlight"><code class="hljs r">gulp.task(<span class="hljs-string">"styleguide:generate"</span>, <span class="hljs-keyword">function</span>() {

  <span class="hljs-keyword">return</span> gulp.src([<span class="hljs-string">"path/to/css/**/*.sass"</span>])
    .pipe(styleguide.generate({
      title: <span class="hljs-string">"My Styleguide"</span>,
      <span class="hljs-keyword">...</span>
      extraHead: [
        <span class="hljs-string">'&lt;script src="/js/all-components.js"&gt;&lt;/script&gt;'</span>,
        <span class="hljs-keyword">...</span>
      ]
    <span class="hljs-keyword">...</span>
</code></pre><p>Another option for you to use in the configuration is <code>disableEncapsulation: true</code>. By default, the tool wraps every
component into a Shadow DOM container. It makes the components encapsulated and protects from unwanted impact of global CSS.
Also, the Shadow DOM wrapper prevents global JavaScript to access the components. Disabling this function, you can give
the JavaScript all the access, the same way as it works on a usual page.</p>
<p>In most cases, JavaScript for the components requires initialization. On the style guide&#39;s pages a <code>styleguide:onRendered</code>
event emits when a component is rendered. You can listen for this event and initialize the components in the event&#39;s
handler function.</p>
<p>For example, if using jQuery:</p>
<pre class="highlight"><code class="hljs javascript">$(<span class="hljs-built_in">window</span>).on(<span class="hljs-string">'styleguide:onRendered'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span> </span>{
  <span class="hljs-comment">// e.originalEvent.detail.elements[0] - component's container</span>
  initComponent(e.originalEvent.detail.elements[<span class="hljs-number">0</span>])
});
</code></pre><h2 id="additional-processors">Additional processors</h2>
<p>The SC5 Style Guide parses the KSS documentation in your CSS (SASS, LESS) code, collects information about all the
components and produces a JSON file with it. The documentation pages you can see are the Angular pages built
on the information in this JSON.</p>
<p>Generating the style guide, you can inject additional processors into transforming data for this JSON file. The
custom processing functions can re-organize and modify this data. You can use this trick to provide a more clever
generator, run templates and parametrized JavaScript components.</p>
<p>Examine the generated <code>styleguide.json</code> file to see how the data is organized by default. You are going to find out that
every component is represented by an object similar to the following:</p>
<pre class="highlight"><code class="hljs less">{
  <span class="hljs-attribute">header</span>: <span class="hljs-string">"Sub navigation tabs"</span>,
  <span class="hljs-attribute">description</span>: <span class="hljs-string">"&lt;p class="</span>sg<span class="hljs-string">"&gt;Navigation item&lt;/p&gt; "</span>,
  <span class="hljs-attribute">modifiers</span>: [ ],
  <span class="hljs-attribute">deprecated</span>: false,
  <span class="hljs-attribute">experimental</span>: false,
  <span class="hljs-attribute">reference</span>: <span class="hljs-string">"4.15.1"</span>,
  <span class="hljs-attribute">markup</span>: <span class="hljs-string">"&lt;ul class="</span>sub-navigation-tabs<span class="hljs-string">"&gt;...&lt;ul&gt;"</span>,
  <span class="hljs-attribute">css</span>: <span class="hljs-string">".sub-navigation-tabs { /* some css */ }"</span>,
  <span class="hljs-attribute">syntax</span>: <span class="hljs-string">"less"</span>,
  <span class="hljs-attribute">file</span>: <span class="hljs-string">"tabs.less"</span>,
  <span class="hljs-attribute">parentReference</span>: <span class="hljs-string">"4.15"</span>,
  <span class="hljs-attribute">wrapper</span>: <span class="hljs-string">"&lt;sg-wrapper-content/&gt;"</span>,
  <span class="hljs-attribute">renderMarkup</span>: <span class="hljs-string">"&lt;ul class="</span>sub-navigation-tabs<span class="hljs-string">"&gt;...&lt;ul&gt;"</span>,
  <span class="hljs-attribute">variables</span>: [
    <span class="hljs-string">"colorMain"</span>,
    <span class="hljs-string">"bgColorSecond"</span>,
    <span class="hljs-string">"textColor"</span>,
    <span class="hljs-string">"textColorHover"</span>
  ],
  <span class="hljs-attribute">fileHash</span>: <span class="hljs-string">"d00311f793d66a9e9dee9939dedd9fd9"</span>
}
</code></pre><p>To modify this data, provide additional processing function as <code>styleguideProcessors</code> option. For example,</p>
<pre class="highlight"><code class="hljs r">gulp.task(<span class="hljs-string">"styleguide:generate"</span>, <span class="hljs-keyword">function</span>() {

  <span class="hljs-keyword">return</span> gulp.src([<span class="hljs-string">"path/to/css/**/*.sass"</span>])
    .pipe(styleguide.generate({
      title: <span class="hljs-string">"My Styleguide"</span>,
      <span class="hljs-keyword">...</span>
      styleguideProcessors: {
        <span class="hljs-number">30</span>: processTemplates
      }
    <span class="hljs-keyword">...</span>
</code></pre><p>As a value of this option, you can list the processing functions. The given indexes matter for the order in which these
functions are applied to the data.</p>
<p>Check out <a href="https://github.com/SC5/sc5-styleguide#build-options">the documentation for options</a>.</p>
<p>In my projects, I used additional processors to operate custom KSS parameters and modify data.</p>
<h2 id="custom-kss-data">Custom KSS data</h2>
<p>In the section descriptions, you can provide additional KSS parameters with the names prefixed with <code>sg-</code>. For example,
you can provide a path to a template which produces the markup for the component:</p>
<pre class="highlight"><code class="hljs nimrod">// <span class="hljs-type">Button</span>
//
// markup:
// { title: <span class="hljs-string">"Move on"</span>, <span class="hljs-keyword">type</span>=<span class="hljs-string">"submit"</span> }
//
// sg-<span class="hljs-keyword">template</span>:
// src/components/button/button.ejs
//
// <span class="hljs-type">Styleguide</span> <span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>
</code></pre><p>In here the markup works as an input value for the given template. You can teach Style Guide to apply the template to
the declared object and put the result as a markup to render. To do it you need a custom processing function mentioned
above.</p>
<pre class="highlight"><code class="hljs nimrod"><span class="hljs-keyword">var</span> processTemplates = (styleguide) =&gt; {

  styleguide.sections.forEach((section) =&gt; {

    <span class="hljs-keyword">if</span> (section['sg-<span class="hljs-keyword">template</span>']) {
      <span class="hljs-keyword">var</span> templatePath = section['sg-<span class="hljs-keyword">template</span>'].trim()
      templatePath = path.join(process.cwd(), templatePath)

      <span class="hljs-keyword">var</span> templateStr = fs.readFileSync(templatePath, 'utf8')
      <span class="hljs-keyword">var</span> inputData = eval('(' + section.markup + ')')

      section.renderMarkup = ejs.render(templateStr, insertData)
    }

  }

}
</code></pre><h2 id="templates-on-fly">Templates on fly</h2>
<p>In the single-page applications, templates work on the client side. In this case, it is better to process them
in the style guide too. In other words, you should include the templates into the JavaScript bundle and initialize
the components on containers.</p>
<p>Combining this approach to the custom processors, you can store the code example for every compoentn in the <code>markup</code>
KSS field.</p>
<p>For example,</p>
<pre class="highlight"><code class="hljs r">// Tabs
//
// markup:
// var Tabs = <span class="hljs-keyword">require</span>(<span class="hljs-string">'src/components/tab.js'</span>)
// Tabs.init($container, { items: [<span class="hljs-keyword">...</span>] })
//
// sg-js-component:
// &lt;div class=<span class="hljs-string">"sg-tabs-container"</span>&gt;&lt;/div&gt;
//
// Styleguide <span class="hljs-number">1.2</span><span class="hljs-number">.3</span>
</code></pre><p>With a custom processor, you can put the container&#39;s code as a markup to render:</p>
<pre class="highlight"><code class="hljs php"><span class="hljs-keyword">var</span> processorForJsComponents = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(styleguide)</span> </span>{

  styleguide.sections.<span class="hljs-keyword">forEach</span>((section) =&gt; {
    <span class="hljs-keyword">if</span> (section[<span class="hljs-string">'sg-js-component'</span>]) {
      section.renderMarkup = section.wrapper.replace(
        <span class="hljs-string">'&lt;sg-wrapper-content/&gt;'</span>, section[<span class="hljs-string">'sg-js-component'</span>]
      );
    }
  }

}
</code></pre><h2 id="adjustable-initialization-for-javascript">Adjustable initialization for JavaScript</h2>
<p>Usually, different components need to be initialized in differently. Also, they may require some fake data. You can
run various Javascript functions on separate component containers to get this result.</p>
<pre class="highlight"><code class="hljs coffeescript"><span class="hljs-reserved">var</span> TabsInit = <span class="hljs-built_in">require</span>(<span class="hljs-string">'src/components/tabs/tabs.init.js'</span>)

<span class="hljs-reserved">var</span> knownComponents = {
  <span class="hljs-string">'.sg-tabs-container'</span>: TabsInit
}

$(<span class="hljs-built_in">window</span>).<span class="hljs-literal">on</span>(<span class="hljs-string">'styleguide:onRendered'</span>, <span class="hljs-reserved">function</span>(e) {

  knownComponents.forEach(<span class="hljs-function"><span class="hljs-params">(componentInit, componentSelector)</span> =&gt;</span> {
    <span class="hljs-reserved">var</span> containingComponents = $(e.originalEvent.detail.elements[<span class="hljs-number">0</span>]).find(componentSelector)
    <span class="hljs-keyword">if</span> (containingComponents.length &gt; <span class="hljs-number">0</span>) {
      componentInit(containingComponents)
    }
  })

})
</code></pre><p>This code runs a corresponding function for every selector in the <code>knownComponents</code> object. The matching DOM element(s)
passed into the initializing function as a parameter.</p>
<pre class="highlight"><code class="hljs php"><span class="hljs-comment">// src/components/tabs/tabs.sg-init.js</span>

<span class="hljs-keyword">var</span> Tabs = <span class="hljs-keyword">require</span>(<span class="hljs-string">'./tabs.js'</span>)

<span class="hljs-keyword">var</span> fakeData = [
  { title: <span class="hljs-string">'Tab1'</span>, url: <span class="hljs-string">'/index.html'</span> },
  { title: <span class="hljs-string">'Tab2'</span>, url: <span class="hljs-string">'/contacts'</span> }
]

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-variable">$container</span>)</span> </span>{
  <span class="hljs-comment">// Real calling for initing function depends on</span>
  <span class="hljs-comment">// you component system interface</span>
  Tabs.init(<span class="hljs-variable">$container</span>, { items: fakeData })
}
</code></pre><p>In this system, you can have several containers with the same CSS class but parametrized with any other information, e.g.
data attributes:</p>
<pre class="highlight"><code class="hljs r">// Tabs, another version
//
// markup:
// var Tabs = <span class="hljs-keyword">require</span>(<span class="hljs-string">'src/components/tab.js'</span>)
// Tabs.init($container, { another: true, items: [<span class="hljs-keyword">...</span>] })
//
// sg-js-component:
// &lt;div class=<span class="hljs-string">"sg-tabs-container"</span> data-type=<span class="hljs-string">"another"</span>&gt;&lt;/div&gt;
//
// Styleguide <span class="hljs-number">1.2</span><span class="hljs-number">.4</span>
</code></pre><pre class="highlight"><code class="hljs r"><span class="hljs-keyword">...</span>
module.exports = <span class="hljs-keyword">function</span>($container) {
  var type = $container.data(<span class="hljs-string">'type'</span>)

  <span class="hljs-keyword">if</span> (type == <span class="hljs-string">'another'</span>) {
    Tabs.init($container, { another: true,  items: fakeData })
  } <span class="hljs-keyword">else</span> {
    Tabs.init($container, { items: fakeData })
  }
}
</code></pre><h2 id="file-structure">File structure</h2>
<p>You may have noticed that I suggest storing everything related to the component under the same folder. This is also
relevant to the style-guide-related files.</p>
<p>For a user, a component is a consistent entity. They get it as a whole thing, no matter how many technologies
are behind. For a developer, it is not that straightforward. We use CSS for styling, JavaScript for interactions and HTML
for the view. The corresponding code is usually placed in a separate file for each technology. I find it quite
distracting.</p>
<p>However, the &#39;component folder&#39; approach smoothes this situation. Storing everything (including the documentation) in
the same place improves developer&#39;s experience very much.</p>
<pre class="highlight"><code class="hljs stylus">src/
  components/
    login/
      login<span class="hljs-class">.ejs</span>
      login<span class="hljs-class">.js</span>
      login<span class="hljs-class">.sg-init</span><span class="hljs-class">.js</span>
    tabs/
      tabs<span class="hljs-class">.ejs</span>
      tabs<span class="hljs-class">.js</span>
      tabs<span class="hljs-class">.sass</span>
      tabs<span class="hljs-class">.sg-init</span><span class="hljs-class">.js</span>
</code></pre><h2 id="enjoy">Enjoy</h2>
<p>After ajusting the SC5 Style Guide, as shown above, you will get the double living documentation. Remember about the
watching mode to re-generate the style guide on the file changes. It works as a nice development playground.</p>
<p>Also, last but not least, I would like to thank the community which made these things possible. I used the SC5 Style Guide
features by other developers and so feel very grateful. You may see their names <a href="https://github.com/SC5/sc5-styleguide/releases">at the releases&#39;
page</a>. If you want yours to appear here, please
<a href="https://github.com/SC5/sc5-styleguide">contribute</a>.</p>
]]></description>
            <link>http://varya.me//en/posts/sc5-style-guide-next-level</link>
            <guid isPermaLink="true">http://varya.me//en/posts/sc5-style-guide-next-level</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 23 May 2016 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Simple React Angular project]]></title>
            <description><![CDATA[<p>Earlier this year, I participated in a development of a single page application. With the team, we started this
project from scratch. This situation was the most suitable to practice the new technologies.</p>
<p>The stack I&#39;ve tried was React + ES2015 + postcss + webpack. However, keeping in mind that most of the
team (who were supposed to maintain the project later) are mainly experienced in Angular, I was looking for some
sort of combination of these frameworks.</p>
<excerpt/>

<p>Finally, I made a project with React used for the view and Angular governing the data layer. I
believe that such project is ideal for the a bridge role. Often happens that the development team has a
strict deadline. There is no time to invent new rocket science approaches. However, we can introduce them gradually.</p>
<p>For that project, I decided that we can introduce React with ES2015. The project structure is easy to refactor
into a React-only project in the next iterations.</p>
<p>I cannot share the exact code of the project, but I created a dummy repository with the same structure:
<a href="https://github.com/varya/angular-react-stub">varya/angular-react-stub</a>.</p>
<p>A new project may be forked/copied from it. After installation of the required npm packages, the development starts with
running</p>
<pre class="highlight"><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start
</code></pre><p>It starts a local server that builds of html, js and css files related to the project. The magic
happens with <code>webpack</code>. Let me explain it below.</p>
<p>For now, let&#39;s concentrate on the file structure.</p>
<p>A human produced code of the project is placed in the <code>src</code> folder.</p>
<pre class="highlight"><code class="hljs stylus">src/

  _helpers/

  modules/
    menu/
      <span class="hljs-tag">menu</span><span class="hljs-class">.component</span><span class="hljs-class">.js</span>
      <span class="hljs-tag">menu</span><span class="hljs-class">.css</span>

  pages/
    contact/
      contact<span class="hljs-class">.ctrl</span><span class="hljs-class">.js</span>
      contact<span class="hljs-class">.html</span>

  index<span class="hljs-class">.html</span>
  index<span class="hljs-class">.js</span>
</code></pre><p>The <a href="https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/index.js">index.js</a> file
is &#39;entering point&#39; of the building process. Here, the webpack finds out what the modules required for the
app are.</p>
<p>In this file, I create an Angular application and define the rules for routing. Roughly, each routing path corresponds
to its page. It takes a page template (an <code>html</code> file) and a page controller (a <code>js</code> module), and make them work
together.</p>
<p>To keep everything neat, I made <code>pages</code> folder, where each page has a subfolder with a template
and a controller.</p>
<p>The controller is normal Angular code. It manipulates the data for future usage in the view. Also, controller is
responsible for extraction the data fromthe server and any transformation of it.</p>
<p>However, the given example contains no such
heavy code. Anyway, you can see how the <code>$scope</code> is filled in
<a href="https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/pages/components/components.ctrl.js">pages/components/components.ctrl.js</a>.</p>
<p>The data from <code>$scope</code> is accessible in the template. From <a href="https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/pages/components/components.html">pages/components/components.html</a>
you can see how it is passed down to the only used Angular directive, <code>react-component</code>. This directive is a bridge
between Angular-cooked data and React-operated view. In the directive you declare what React component to render and
pass the properties to it. After that, the React component operates independently from the Angular.</p>
<h2 id="modules">Modules</h2>
<p>There is a special <code>modules</code> folder at the same level as <code>pages</code>. It contains all the React modules used in the
application. The modules can be complex and include other modules. However, the file structure is flat. Each component
is represented by a folder with its JavaScript file and any other related content inside. Often, it is CSS, however
the pictures and other required stuff may be in the same folder.</p>
<p>You can check out a typical component code in the file
<a href="https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/src/modules/menu/menu.component.js">modules/menu/menu.component.js</a>.</p>
<p>Note that the required CSS is imported in the JavaScript as</p>
<pre class="highlight"><code class="hljs gradle"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./menu.css'</span>;
</code></pre><p>This is one of the webpack&#39;s features which makes developing with it so awesome. A component declares the CSS it uses.
Then, the bundled CSS is built according to these declarations. In refactoring, the process will
automatically exclude out-of-date CSS if its module is no longer in use.</p>
<p><a href="https://github.com/varya/angular-react-stub/blob/3870766a28adb61fc2f1fc86fbfbe538c00da1f9/webpack.config.js">webpack.config.js</a>
stores the data what files to process and how to do it.
It gets the file types from their extensions. Thus, <code>*.js</code> and <code>*.jsx</code> files are ES2015 and transform
into plain JavaScript. <code>*.html</code> files are inserted as raw strings. This is why they can be used as Angular templates.
<code>*.css</code> files are required as styles but first transform with Postcss. I also use <code>precss</code> as a plugin, which
makes possible to enjoy most of the usual pre-processing features.</p>
<p>This covers pretty much all about the basic structure. A real project can use external libraries and modules as
well as have more complex building process. But here is its starting point: <a href="https://github.com/varya/angular-react-stub/">varya/angular-react-stub</a>.</p>
]]></description>
            <link>http://varya.me//en/posts/react-angular-project</link>
            <guid isPermaLink="true">http://varya.me//en/posts/react-angular-project</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Thu, 19 May 2016 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Materials for your React hackathon]]></title>
            <description><![CDATA[<p>Being a frontend developer these days means to learn the new things every day. We read articles and blog posts,
examine the changelogs, follow the Twitter announcements and participate in the GitHub discussions.
This helps to keep up.</p>
<p>However,
when it comes to something bigger, like the exploring of a new framework or an ecosystem, it is not enough.
The perfect solution is to organize a whole day hackathon for the developers in your company.
At SC5 online, we took this advantage mastering the React development. Few ecosystem components such as
webpack and redux came along.</p>
<excerpt/>

<p>The private companies have hard time to find an opportunity and organize such event.
Moreover, the preparations for the hackathon consume a lot of resources. To ease the hardship, I&#39;ve decided to share
the materials that I prepared for our event. The hackathon plan and the detailed description of slides are given below.
hackathon. Below you can find the hackathon plan and the slides explained.</p>
<p>It is the presentation that I used for a pre-coding section:
<a href="http://varya.me/reactjs-hackathon/">varya.me/reactjs-hackathon</a>.</p>
<p>At the moment, the slides were hosted online, and before starting I provided a short link to them.
During the coding event, the developers need a bunch of online materials, including starting projects, documentation,
tips and tricks. The links to these meterials were inserted in my presentation, and it was important to let the others
check them out. Also, we had a special Slack channel where the links were shared one more time.</p>
<p>The next slide showed the plan of event to the participants:</p>
<ol>
<li>About the event</li>
<li>Choosing the projects</li>
<li>Introduction to React</li>
<li>Stub projects</li>
<li>Linking UI libraries</li>
<li>React Native</li>
<li>Relay&amp;GraphQL</li>
<li>Coding</li>
</ol>
<p>The slides included everything listed besides the coding part, which was devoted directly to the development.
Altogether, the presentation took about 50 minutes. This amount of time ensured that I made all the needed
introductions. Also, it was not too long to make people bored.</p>
<p>On the next stage, I offered the applications that we could write using React during the event.</p>
<p>Here are the listed options:</p>
<ul>
<li>Instagram-like</li>
<li>Twitter dashboard</li>
<li>Shopping list</li>
<li><a href="http://kipp.is/map">Bars on map</a></li>
<li><a href="https://claudiopro.github.io/2048-react/">2048</a></li>
<li>Tetris</li>
<li><a href="https://reake-react-snake.firebaseapp.com/">Snake game</a></li>
<li>Your own idea</li>
</ul>
<p>I believe that the product goals should be defined at the start. It is especially important for the React hackathon.
People start to think how they would code it in the way they are used to work. When it comes to React, they are
impressed by the elegance and easiness of the approach.</p>
<p>After that, I provided the links to the official documentation and tutorials. It is evident that even whole day event
is not sufficient to learn how to work with a new framework. However, it lets ignite an initial interest that can lead
to the following independet research. A link to an interesting tutorial can be the first step.</p>
<p>At the time of hackathon, some developers had a React experience, some have read the articles, and some at least heard
about the approach. The hackathon is not a &#39;teach-you-how&#39; workshop but a collaborative and even team-building event.
This why I wanted all the people to be involved.</p>
<p>When giving
a presentation, you can make a contact with the audience by asking the questions. Moreover, you can add the given
answers into the presentation on-the-go. One of my slides had the same a title as the famous Reddit&#39;s question
&#39;<a href="https://www.reddit.com/r/javascript/comments/2uvz0x/whats_so_great_about_reactjs/">What is so great about React.js</a>&#39;.
I wrote the answers from the audience into a big textarea in the slide. It visualised the contribution that everyone
made in the introduction.</p>
<p>When it came to the React buzz words, we had not a solo talk but a proper discussion.</p>
<ul>
<li>ES2015 (ES6)</li>
<li>React</li>
<li>webpack</li>
<li>Flux / Redux</li>
<li>Relay &amp; GraphQL</li>
</ul>
<p>To save the developers&#39; time in the codung section, I gave the definitions and explanations in advance.
Also, the most of the applications usually start with cloning the starter project. In the hackathon, I aimed not to give
a fish but to teach how to fish. To do that, I provided the link to the starter kit search:
<a href="http://andrewhfarmer.com/starter-project/">andrewhfarmer.com/starter-project</a>.</p>
<p>However, we were limited in our time, so I explained some essentials and shortcuts for the efficient start.</p>
<p>The top priority of the hackathon was diving into React ecosystem. The ultimate goal was to write an application
using ES2015 (aka ES6), build it with webpack and use Readux. However, it might have been too complicated for the
React beginners, and I did not want to exclude them.</p>
<p>To ensure the inclusiveness, I recommended the simplest React starter kit. Many developers did not realise that they
can code React applications by linking two scripts hosted at CDN that is similar to write-on-jQuery approach.</p>
<pre class="highlight"><code class="hljs javascript">&lt;script src=<span class="hljs-string">"https://fb.me/react-0.14.7.js"</span>
    integrity=<span class="hljs-string">"sha384-xQae1pUPdAKUe0u0KUTNt09zzdwheX4VSUsV8vatqM+t6X7rta01qOzessL808ox"</span>
    crossorigin=<span class="hljs-string">"anonymous"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"https://fb.me/react-dom-0.14.7.js"</span>
    <span class="hljs-attribute">integrity</span>=<span class="hljs-value">"sha384-A1t0GCrR06cTHvMjaxeSE8XOiz6j7NvWdmxhN/9z748wEvJTVk13Rr8gMzTUnd8G"</span>
    <span class="hljs-attribute">crossorigin</span>=<span class="hljs-value">"anonymous"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
</span></code></pre>
<p>With these two scripts and a single one local JavaScript file, you can follow <a href="https://facebook.github.io/react/downloads.html">the official documentation</a>
and start your React application right away.</p>
<p>The other option is suited for those who are comfortable with builders and don&#39;t want to dedicate their time
for sort out ES2015 and prefer plain JavaScript. When I&#39;ve started with React, I dived deeply into the new
things. However it took some time, which is not availabe during the one day event.
So, &#39;ES5 + builder&#39; solution is reasonable for the developers who want get their hands on React quickly.
To provide the different options, I gave the links to the other starter kits:</p>
<ul>
<li><a href="https://github.com/petehunt/ReactHack">with webpack</a></li>
<li><a href="https://github.com/artyomtrityak/react-hackathon">with gulp</a></li>
</ul>
<p>The last stubs &#39;ES2015 + webpack&#39; type. I&#39;ve given two:</p>
<ul>
<li><a href="https://github.com/pheuter/essential-react">Essential</a></li>
<li><a href="https://github.com/varya/react-stub">varya/react-stub</a><ul>
<li>ES2015, BEM, PostCSS, webpack</li>
</ul>
</li>
</ul>
<p>Despite the existence of a good starter project Essential, I&#39;ve created my own and recommended it.
I keep it minimalistic, so there is no redux linking there. I believe that the first project is better without
exessive complexity.</p>
<p>One more reason to create my starter kit was to demonstrate the different UI libraries linked and used
within the React project. Honestly, I don&#39;t see any ideal solution for the React UI library yet.
The ecosystem misses a crucial part, but the existing libraries can help at the initial bootstrapping stage.
Moreover, it provides a knowledge to use when it comes to building your own UI library for the React projects.</p>
<ul>
<li><a href="http://react-toolbox.com/#/">React ToolBox</a> -
<a href="https://github.com/varya/react-stub/tree/with-react-toolbox">react-stub@with-react-toolbox</a></li>
<li><a href="http://www.material-ui.com/#/">Material UI</a> -
<a href="https://github.com/varya/react-stub/tree/with-material-ui">react-stub@with-material-ui</a></li>
<li><a href="http://nikgraf.github.io/belle/#/?_k=xvldj2">Belle</a> -
<a href="https://github.com/varya/react-stub/tree/with-belle">react-stub@with-belle</a></li>
</ul>
<p>To demonstrate how React works with UI libraries, I prepared a branch for each option. These branches
are in the public GitHub repository and available for using. Also, I was able to run the code on my computer
and show how the application changes after I alter the code.</p>
<p>Live coding section always makes a good impression. Moreover, it connects the theory with actual coding.</p>
<p>Before the development, I provided the dummy JSONs for the applications based on the
third-party services data (Instagram or Twitter). That helped the developers to be focused on React rather
than exploring APIs.</p>
<p>During the hackathon, we had React Native and Relay &amp; GraphQL sections for the advanced React users. These topics
were covered by my colleague <a href="https://fi.linkedin.com/in/anssiherranen">Anssi Herranen</a> and our quest <a href="https://fi.linkedin.com/in/freiksenet">Mikhail
Novikov</a> from <a href="https://www.reindex.io/">Reindex</a>.</p>
<p>After all the presentations, it was time to code. It is important that the hackathon organizers take care of the
developers&#39; basic needs and let the people be focused on the programming. I&#39;m thankful for our Head of Technology
<a href="https://fi.linkedin.com/in/laurisvan">Lauri Svan</a> for ordering pizza and drinks, and organizing the people.
The developers can stay active much longer if they are taken care.</p>
<p>As a result of our hackathon, some developers came up with the applications and demostrated them in the demo part.
The others got stable base to continues their studies later. And no doubt we all had huge fun.</p>
<p>Feel free to take my presentation and materials for a hackathon in your company or at the community meeting. React
rocks! :-)</p>
]]></description>
            <link>http://varya.me//en/posts/react-hackathon-materials</link>
            <guid isPermaLink="true">http://varya.me//en/posts/react-hackathon-materials</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Sat, 16 Apr 2016 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Visual diffs for the images in a git repo]]></title>
            <description><![CDATA[<p>My first task for new projects is to create a git repository. Whether it is a new app, or conference slides, or even an
article, I prefer to keep everything in Git. It is an excellent tool, and, personally, I enjoy its command line
interface.</p>
<p>However, there is always room for improvement. Recently I found an idea how to make my git visualize the changes that
I&#39;ve done to the images in a repository.</p>
<excerpt/>

<pre class="highlight"><code class="hljs sh">Varyas-MBP £ ~/path/to/project ⤳ master*
  › git status
On branch master
Changes not staged <span class="hljs-keyword">for</span> commit:
  (use <span class="hljs-string">"git add &lt;file&gt;..."</span> to update what will be committed)
  (use <span class="hljs-string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="hljs-keyword">in</span> working directory)

    modified:   desktop.blocks/social-ico/social-ico__rss.png
    modified:   desktop.blocks/social-ico/social-ico__twitter.png

no changes added to commit (use <span class="hljs-string">"git add"</span> and/or <span class="hljs-string">"git commit -a"</span>)
Varyas-MBP £ ~/path/to/project ⤳ master*
</code></pre>
<p>I can run <code>git diff</code> over each of the modified images to see the following:</p>
<p><img src="/posts/image-diffs-with-git/diff1.png" alt=""></p>
<p><img src="/posts/image-diffs-with-git/diff2.png" alt=""></p>
<p>For every picture displayed, I can see a previous version (on the left side), a current version (on the right side) and
visually represented difference (in between). This feature is useful for tracking exact changes in the image. Now, I can
easily spot if some particular details were shifted, some colors were changed, or a picture was accidentally blended
with another one.</p>
<p>You can configure git to do the same. First, install ImageMagick to provide a visual comparison. Note that for the
latest versions of OS X you need to install a package with a support of X11. To install with <code>brew</code>, do the following:</p>
<pre class="highlight"><code class="hljs sql">  › brew <span class="hljs-operator"><span class="hljs-keyword">install</span> imagemagick <span class="hljs-comment">--with-x11</span>
</span></code></pre><p>Then, create a script to compare two given images. Run <code>cat ~/bin/git-imgdiff</code>, and paste inside:</p>
<pre class="highlight"><code class="hljs bash"><span class="hljs-shebang">#!/bin/sh</span>
compare <span class="hljs-variable">$2</span> <span class="hljs-variable">$1</span> png:- | montage -geometry +<span class="hljs-number">4</span>+<span class="hljs-number">4</span> <span class="hljs-variable">$2</span> - <span class="hljs-variable">$1</span> png:- | display -title <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> -
</code></pre><p>Now, test the script. It should do the comparison of two processed images:</p>
<pre class="highlight"><code class="hljs stylus">  › ~/bin/git-imgdiff img1<span class="hljs-class">.png</span> img2<span class="hljs-class">.png</span>
</code></pre><p>At this step, you need to show git how to use compariing script. For that, define the image files their extensions
in a special file. Run <code>cat ~/.gitattributes</code> and paste the following:</p>
<pre class="highlight"><code class="hljs stylus">*<span class="hljs-class">.gif</span> diff=image
*<span class="hljs-class">.jpg</span> diff=image
*<span class="hljs-class">.png</span> diff=image
</code></pre><p>Provide git with this configuration by:</p>
<pre class="highlight"><code class="hljs stylus">  › git config --global core<span class="hljs-class">.attributesfile</span> <span class="hljs-string">'~/.gitattributes'</span>
</code></pre><p>The last step is to instruct git to use your script when <code>diff</code> command is applied to the matching files:</p>
<pre class="highlight"><code class="hljs stylus">  › git config --global diff<span class="hljs-class">.image</span><span class="hljs-class">.command</span> <span class="hljs-string">'~/bin/git-imgdiff'</span>
</code></pre><p>That&#39;s it. Now, running a <code>git diff</code> over your images you will get a human-friendly output. Enjoy!</p>
<h3 id="references">References</h3>
<ul>
<li>[1] <a href="http://www.akikoskinen.info/image-diffs-with-git/">http://www.akikoskinen.info/image-diffs-with-git/</a></li>
<li>[2] <a href="http://paulmestemaker.com/imagemagick-display-mac-os-x/">http://paulmestemaker.com/imagemagick-display-mac-os-x/</a></li>
</ul>
]]></description>
            <link>http://varya.me//en/posts/image-diffs-with-git</link>
            <guid isPermaLink="true">http://varya.me//en/posts/image-diffs-with-git</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Fri, 18 Mar 2016 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Dealing atomically with icon fonts]]></title>
            <description><![CDATA[<p>My recent huge project was developing a library of CSS and JavaScript components for sharing this code across a lot of
web services and mobile apps. In most cases such work brings up question about how to avoid blocking the processes.</p>
<p>The library has its own flow, and obviously the new things can only appear in new versions. Although I made my best to
provide fast releases, and so the library has them 2-3 times a week, it is still understandable that the library
customers sometimes cannot wait even an hour.</p>
<p>I belive that one of the must-haves of UI library is the freedom which it should give to its customers. You can easily
provide this if practice atomic approach everythere. For example, for the icon fonts.</p>
<excerpt/>

<h3 id="solid-piece">Solid piece</h3>
<p>Soon or not SVG will conquer the world. But now we still have icon fonts in some projects. The same story was with that
library.</p>
<p>However the icon font perfectly suited for the displaying icons onto the web pages, it was integration and flow which
created the problem. All the icons fit into one font file (well, in 4 different formats):</p>
<pre class="highlight"><code class="hljs stylus">src/
  fonts/
    iconfont<span class="hljs-class">.eot</span>
    iconfont<span class="hljs-class">.svg</span>
    iconfont<span class="hljs-class">.ttf</span>
    iconfont<span class="hljs-class">.woff</span>
</code></pre><p>Also the library provided CSS to make the icon-symbol matching:</p>
<pre class="highlight"><code class="hljs scss"><span class="hljs-class">.icon</span> {
  <span class="hljs-attribute">font-family</span><span class="hljs-value">: <span class="hljs-variable">$global-font-icon</span>;</span>
  &amp;<span class="hljs-pseudo">:before</span> {
    <span class="hljs-comment">/* Some common icon stuff */</span>
  }
  &amp;--support {
    &amp;<span class="hljs-pseudo">:before</span> {
      <span class="hljs-attribute">content</span><span class="hljs-value">: <span class="hljs-string">"a"</span>;</span>
    }
  }
  &amp;--chat {
    &amp;<span class="hljs-pseudo">:before</span> {
      <span class="hljs-attribute">content</span><span class="hljs-value">: <span class="hljs-string">"b"</span>;</span>
    }
  }
  ...
}
</code></pre>
<p>Customers get the library as a bower or npm package. When they need a new icon to be in the set, they might request this
and wait for the package to update. As usual, the fastest way to get something happened is to do this yourself. So, it
possible to contribute and even release yourself. But still any further change would need you to go through the
development process.</p>
<h3 id="atomic-and-buildable">Atomic and buildable</h3>
<p>Often you need to divide into smaller pieces in order to make things more mantainable. The same goes with icons. In the
library we changed it so that the source is now a set of SVG files:</p>
<pre class="highlight"><code class="hljs stylus">src/
  icons/
    <span class="hljs-number">1000</span>-support<span class="hljs-class">.svg</span>
    <span class="hljs-number">1010</span>-chat<span class="hljs-class">.svg</span>
    <span class="hljs-number">1020</span>-users<span class="hljs-class">.svg</span>
</code></pre><p>The file names are important, these words are used to generate the CSS classes, which are the API for the customer.
Numbers are for the right order. If building the icon system from very beginning, they are not needed. But in the
library case I wanted backward compatibility.</p>
<p>Then, these icons are built into the same icon fonts with <code>gulp-iconfont</code> plugin:</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp"</span>);
<span class="hljs-keyword">var</span> iconfont = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-iconfont"</span>);
<span class="hljs-keyword">var</span> consolidate = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-consolidate"</span>);

<span class="hljs-keyword">var</span> sourcePath = <span class="hljs-string">"src/"</span>;

gulp.task(<span class="hljs-string">"build:icons"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> gulp.src([sourcePath + <span class="hljs-string">"/icons/*.svg"</span>])
      .pipe(iconfont({
        fontName: <span class="hljs-string">"myicons"</span>,
        formats: [<span class="hljs-string">"ttf"</span>, <span class="hljs-string">"eot"</span>, <span class="hljs-string">"woff"</span>, <span class="hljs-string">"svg"</span>],
        centerHorizontally: <span class="hljs-literal">true</span>,
        fixedWidth: <span class="hljs-literal">true</span>
      }))
      .on(<span class="hljs-string">"glyphs"</span>, (glyphs) =&gt; {

        glyphs.forEach((icon) =&gt; {
          icon.name = icon.name.replace(<span class="hljs-regexp">/^\d+\-/g</span>, <span class="hljs-string">""</span>);
        });

        gulp.src(sourcePath + <span class="hljs-string">"/icons/util/*.scss"</span>) <span class="hljs-comment">// Template</span>
            .pipe(consolidate(<span class="hljs-string">"lodash"</span>, {
                glyphs: glyphs,
                fontName: <span class="hljs-string">"myiconfont"</span>,
                fontPath: <span class="hljs-string">"../fonts/"</span>
            }))
            .pipe(gulp.dest(sourcePath + <span class="hljs-string">"/scss/"</span>));
      })
      .pipe(gulp.dest(sourcePath + <span class="hljs-string">"/fonts/"</span>));
});
</code></pre>
<p>Besides the icon files this task needs the templates to produce the CSS (or SCSS, as in this case) which makes the
symbol-class matching. I found it logical to store it together with the icon files:</p>
<pre class="highlight"><code class="hljs stylus">src/
  icons/
    utils/
      iconfont__icons<span class="hljs-class">.scss</span>
      iconfont__variables<span class="hljs-class">.scss</span>
</code></pre><p>It&#39;s possible to manage with one template only, but for even more flexibility I have two. The main one makes the
classes:</p>
<pre class="highlight"><code class="hljs undefined">@font-face {
  font-family: $global-font-icon;
  src:url("&lt;%= fontPath %&gt;&lt;%= fontName %&gt;..eot");
  src:url("&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.?#iefix") format("embedded-opentype"),
    url("&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.woff") format("woff"),
    url("&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.ttf") format("truetype"),
    url("&lt;%= fontPath %&gt;&lt;%= fontName %&gt;.#&lt;%= fontName %&gt;") format("svg");
  font-weight: normal;
  font-style: normal;
}

.icon {
  font-family: $global-font-icon;

  &amp;:before {
    /* Some common icon stuff */
  }
&lt;% _.each(glyphs, function(glyph) { %&gt;
  &amp;.--&lt;%= glyph.name %&gt; {
    &amp;:before {
      content: $icon--&lt;%= glyph.name %&gt;;
    }
  }&lt;% }); %&gt;

}
</code></pre>
<p>And another one makes the varibles:</p>
<pre class="highlight"><code class="hljs undefined">&lt;% _.each(glyphs, function(glyph) { %&gt;
$icon-&lt;%= glyph.name %&gt;: "\&lt;%= glyph.unicode[0].charCodeAt(0).toString(16).toUpperCase() %&gt;" !default;
&lt;% }); %&gt;
</code></pre>
<p>Running the task produces the fonts and 2 generic SCSS files:</p>
<pre class="highlight"><code class="hljs stylus">src/
  <span class="hljs-attribute">font</span>/
    iconfont<span class="hljs-class">.eot</span>
    iconfont<span class="hljs-class">.svg</span>
    iconfont<span class="hljs-class">.ttf</span>
    iconfont<span class="hljs-class">.woff</span>
  scss/
    icons<span class="hljs-class">.scss</span> <span class="hljs-comment">// Not generic</span>
    iconfont__icons<span class="hljs-class">.scss</span>
    iconfont__variables<span class="hljs-class">.scss</span>
</code></pre><p>In the <code>icons.scss</code>, which is normal SCSS file, the result is requested:</p>
<pre class="highlight"><code class="hljs undefined">// Icons
//
// Lists all the icons that are used in the services.
//
// Styleguide 5

@import "iconfont__variables.scss";
@import "iconfont__icons.scss";
</code></pre>
<h3 id="extend-on-fly">Extend on fly</h3>
<p>The variables may be redefined on the customer&#39;s side. This makes is a fast way to change the icon, if the replacement
already sit in the font bundle.</p>
<p>If not, it is almost zero amout of work to implement this build-from-atoms process on the customer side.</p>
<p>The customer has all the library code, let&#39;s say in <code>bower_components</code>, and can have its own folder of icons:</p>
<pre class="highlight"><code class="hljs stylus">bower_components/
  ui-library/
    dist/
      icons/
      scss/
src/
  icons/
    <span class="hljs-number">2000</span>-rabbit<span class="hljs-class">.svg</span>
    <span class="hljs-number">2010</span>-gift<span class="hljs-class">.svg</span>
</code></pre><p>When building the font they need to use both their set of icons and the library icons:</p>
<pre class="highlight"><code class="hljs javascript">
<span class="hljs-keyword">var</span> sourcePath = <span class="hljs-string">"src/"</span>;

gulp.task(<span class="hljs-string">"build:icons"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> gulp.src([sourcePath + <span class="hljs-string">"/icons/*.svg"</span>, <span class="hljs-string">"bower_components/ui-library/dist/icons/*.svg"</span>])
      .pipe(iconfont({
        <span class="hljs-comment">/* The same as above */</span>
      }))
      .on(<span class="hljs-string">"glyphs"</span>, (glyphs) =&gt; {

        gulp.src(<span class="hljs-string">"bower_components/ui-library/dist/icons/util/*.scss"</span>)
            .pipe(consolidate(<span class="hljs-string">"lodash"</span>, {
                <span class="hljs-comment">/* The same as above */</span>
            }))
            .pipe(gulp.dest(sourcePath + <span class="hljs-string">"/scss/"</span>));
      })
      .pipe(gulp.dest(sourcePath + <span class="hljs-string">"/fonts/"</span>));
});
</code></pre>
<p>It is not even needed to implement template for the output SCSS, it comes in the library dist.</p>
<p>With such a flow a UI library customer stays completely independent from the library release cycle and may bring a new
icon into her product as soon as the atomic SVG file is copied into the needed folder. As a background process it is
needed to contribute the same icon into the library, but not necessarily the same moment. And even the contributing
process is changed to be better because it came to adding an SVG file.</p>
<p>As other atomical things, such font flow makes git history more useful. Now it is easier to see
if the provided change affected many or just one icon. Also, SVG images are rendered nicely in pull requests.</p>
<p>Even simultaneous changes of the icons in both library and customer websites are possible and should not cause any
conflict.</p>
<p>And the last but not least nice thing: all the icons are now in the library as SVG files. Hopefully later we come up
with using next century technologies and not the icons fonts. When this sweet moment comes, half of the work will have
been done :-)</p>
]]></description>
            <link>http://varya.me//en/posts/dealing-atomically-with-icon-fonts</link>
            <guid isPermaLink="true">http://varya.me//en/posts/dealing-atomically-with-icon-fonts</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Tue, 10 Nov 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Tag cloud of random sizes in pure CSS]]></title>
            <description><![CDATA[<p>Last week I faced a need to make a fake tag cloud, where the words need to be of different size. This was needed for
a presentation slide, and as my slides are always in HTML/CSS, must be implemented with these technologies. It is always
possible to inject some JavaScript and code anything. But what about pure CSS, do we get random sizes there?</p>
<excerpt/>

<div class="testings" markdown="1">

<ul class="cloud">
<li>performance testing</li>
<li>stress testing</li>
<li>conformance testing</li>
<li>acceptane testing</li>
<li>smoke testing</li>
<li>regression testing</li>
<li>white box testing</li>
<li>functional testing</li>
<li>system testing</li>
<li>black box testing</li>
<li>load testing</li>
<li>compatibility testing</li>
<li>unit testing</li>
</ul>

</div>

<style>
.testings {
    text-align: center;
    width: 400px;
}
.testings .cloud {
    display: inline;
    list-style-type: none;
    width: 400px;
}
.testings .cloud li {
    list-style: none;
    display: inline;
}

/* Random sizes */

.testings .cloud li:nth-of-type(3n + 1) {
    font-size: 1.25em;
}
.testings .cloud li:nth-of-type(4n+3) {
    font-size: 1.5em;
}
.testings .cloud li:nth-of-type(5n - 3) {
    font-size: 1em;
}

</style>

<p>The tag cloud you see above is what I get. You may notice it&#39;s not real random; after refreshing you will always get the
same result. But still looks like a tag cloud of different sizes and works perfectly as an example.</p>
<p>This is a list, it&#39;s easy to generate from markdown:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cloud"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>performance testing<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>stress testing<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>conformance testing<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>acceptane testing<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>smoke testing<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    ...
<span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
</code></pre>
<p>Then, flattened as usual:</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-class">.cloud</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">list-style-type</span>:<span class="hljs-value"> none</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">400px</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-class">.cloud</span> <span class="hljs-tag">li</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">list-style</span>:<span class="hljs-value"> none</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline</span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>And then different sizes are made with a few <code>nth-of-type</code> combined in different variants:</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-class">.cloud</span> <span class="hljs-tag">li</span><span class="hljs-pseudo">:nth-of-type(3n</span> + 1) <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.25em</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-class">.cloud</span> <span class="hljs-tag">li</span><span class="hljs-pseudo">:nth-of-type(4n+3)</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.5em</span></span></span>;
<span class="hljs-rule">}</span></span>
<span class="hljs-class">.cloud</span> <span class="hljs-tag">li</span><span class="hljs-pseudo">:nth-of-type(5n</span> <span class="hljs-tag">-</span> 3) <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1em</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>I tuned the <code>nth-of-type</code> values so that it would look nicely. Depending on the length of the words used, you may need
to play arownd with the values and maybe use more than 3 sizes.</p>
]]></description>
            <link>http://varya.me//en/posts/pseudo-tag-cloud-css</link>
            <guid isPermaLink="true">http://varya.me//en/posts/pseudo-tag-cloud-css</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 02 Nov 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[An answer to the question which should not have been asked]]></title>
            <description><![CDATA[<p>I never thought that I would write a post about diversity. But as the <strong>unicorn law</strong> says that being a woman in tech you
will be eventually speaking about women in tech, I do so now. However I&#39;m doing this not because it is a strong will of
mine. Something happened which makes me to respond.</p>
<excerpt/>

<p>I was recently speaking at a conference (a very good conference, I must say this) and during the asking session after
the talk I got this question:</p>
<p><strong>— How to solve the diversity problem and get more women in our industry?</strong></p>
<p>I was absolutely not ready to this question. No wonder, being at stage and giving a presentation already brings a lot of
stress. When it comes to a question session, it is even harder. And the last thing a speaker wants is to get such question.</p>
<p>This happened to me at the first time, so my response was not correct. In this post I will describe why conference
attendants should not ask this question to female speakers. If you were willing to do so, please read. Maybe you will
change your mind. I will also try to propose a proper respond to future speakers and conference hosts. However, this is
an open question, I believe many can propose much better options. Go ahead in comments :-)</p>
<h2 id="do-not-ask-women-in-tech-about-women-in-tech">Do not ask women in tech about women in tech</h2>
<p>Although I felt very uncomfortable when getting this question, it was hard to describe in words what exactly was wrong.
So, I made some research across the Internet articles and speaking with friends. This is how I learnt about the unicorn
law formulated by <a href="http://emmajane.net/">Emma Jane Westby</a>:</p>
<blockquote>
<p>If you are a woman in Open Source, you will eventually give a talk about being a woman in Open Source.</p>
</blockquote>
<p>I was surprised that the problem had been already formulated and number of people had faced it.</p>
<p>The presentation I gave was not related to gender problems, it was completely technical CSS/JavaScript speech. I am not
a social scientist but a programmer. Moreover, I am not a gender equality activist. I even had never written in my blog
anything related to diversity. So, there is completely no objective reason to ask me questions like that. I was asked
this only because I am a woman.</p>
<p>This is the first answer on &quot;What is wrong?&quot;. Asking a woman gender related questions because she is a woman is pushing
her to represent her gender. However it was clear that my intention of speaking at the conference was to share my findings
in programming and learn from another programmers. It had nothing to do with my gender.</p>
<p>Then, this question could be to the point, if I were responsible for bad diversity situation in the industry. And I am
obviously not. I did my part staying on stage and presenting the result of my work when being asked about the solutions
to the problem which I did not cause.</p>
<p>Another thing, that not being a social scientist I don&#39;t have proper information to develop a good answer. So, the
situation may be described like &quot;a speaker stays on stage in front of hundreds of people looking at her and gets a
question which she clearly is not able to answer&quot;. It is known in advance that I cannot provide any valuable respond to
this question. There would not be any useful information coming from me. The only result was that I was put into an
awkward situation.</p>
<p>The more relevant thing would be to ask a random female about what they know. For example, something about their
personal experience. However, I still do not suggest this, because questions like &quot;What are the difficulties you faced
as a female developer&quot; are very often too personal to be answered on stage. I think that if not on stage but in a
private conversation, I would not mind a question regarding my gender-in-tech experience.</p>
<p>If for some reason you would like a random female speaker to answer a gender-equality question publically, it might be a
good idea to formulate it as much related to their work as you could. Something like &quot;How do you solve diversity problem
<strong>in your company</strong>?&quot; would work better.</p>
<p>So, the conclusion here is that the best way is not to have sexpectations (thanks my colleague Toni for the word) that
female developers have knowledge in the diversity thing and even are interested in gender equality stuff. Ask them what
you would ask male programmers.</p>
<h2 id="for-women-in-tech-how-to-answer-about-women-in-tech">For women in tech: how to answer about women in tech</h2>
<p>As I said, I was not ready for the question. However I felt uncomfortable, I tried to make laugh as I believe that most
conflict situations may be avoided if turned out into a joke. So, I responded:</p>
<p>— Would you ask me such a question if I were a man? So, my answer is: don&#39;t treat us differently.</p>
<p>I do not suggest other ladies to reply like that as now I think that it might have sounded too aggressive. Also, if the
person who asked me the question is reading this post, I apologise for such a response.</p>
<p>The conference host could have help me. But he started to explain why it is a right thing to ask me this question being
based on my gender. I guess this is because the situation was unusual and unexpected for him as well. No one has yet
enough experience in dealing with the stuff. However I believe that killing the discussion is the right thing.
Unfortunately I cannot propose any solution on how exactly to wrap up a case and come to another question. But if you
are going to be a conference host, please, think up.</p>
<p>Anyway, in a few days already not being under stress and having a chance to deeply think about it, I still did not come
up with an answer. Seriously, it is not that easy.</p>
<p>I could say &quot;I don&#39;t know&quot;. But these are not the words to pronounce when being on stage. I hope everyone agrees.</p>
<p>Also I could respond &quot;Sorry, I am not a social scientist&quot;. But I don&#39;t want to make a fool of the person
asking.</p>
<p>The honest version on the question about how to get more women in tech is &quot;If there are already some ladies who have
chosen to be programmers and came into the industry, just leave them in peace. Maybe they will stay&quot;.</p>
<p>Any other ideas?</p>
<p>BTW, this is a good article which helped me a lot to understand my feelings about the situation:
<a href="https://adainitiative.org/2014/03/breaking-the-unicorn-law-stop-asking-women-in-open-techculture-about-women-in-open-techculture/">Breaking the Unicorn Law: Stop asking women in open tech/culture about women in open
tech/culture</a>.</p>
]]></description>
            <link>http://varya.me//en/posts/on-the-unicorn-law</link>
            <guid isPermaLink="true">http://varya.me//en/posts/on-the-unicorn-law</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 07 Sep 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Style-guide the smaller things]]></title>
            <description><![CDATA[<p>I&#39;ve been presenting <a href="http://styleguide.sc5.io/">SC5 Style Guide</a> several times during this year sharing my experience of using it for one
of the SC5&#39;s clients, Elisa. Assuming that Elisa is a huge mobile operator with a lot of websites and a need
to keep those websites visually consistent, there is no wonder that the SC5 Style Guide as a tool provides benefits
there. But what about smaller websites? Would it be useful there? I did not know the answer to this question
and wanted to experiment. The experiment was conducted on my blog codebase.</p>
<excerpt/>

<p>This is how the Living Style Guide looks like: <a href="http://varya.me/styleguide">varya.me/styleguide</a>. You can see the interface
decomposed into block pieces, each of those representing a meaningful interface unit. I haven&#39;t seen the interface of my blog
from this perspective before. It gave me a lot of insight into the ways the CSS architecture of my blog should be designed.
But, let&#39;s consider things one by one.</p>
<h2 id="fine-tuning-the-sc5-style-guide-tool">Fine-tuning the SC5 Style Guide tool</h2>
<p>Everything starts with</p>
<pre class="highlight"><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> sc5-styleguide
</code></pre><p>Then, I was able to use the tool to build the interface representation. It required
<a href="https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/Gulpfile.js">a couple of Gulp tasks</a>.</p>
<p>I had to deviate from the example configuration in a couple of places to make my Style Guide work as it does now. Let me
name and explain these things.</p>
<h3 id="providing-the-approot-parameter-">Providing the <code>appRoot</code> parameter.</h3>
<p>As I am hosting the Style Guide website not it the root folder but in a subfolder named <code>styleguide</code>, I inform the
  generator about that, so it can build the properly working app:</p>
<pre class="highlight"><code class="hljs javascript">gulp.task(<span class="hljs-string">"styleguide:generate"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{

  <span class="hljs-keyword">return</span> gulp.src([<span class="hljs-string">"desktop.blocks/**/*.css"</span>])
    .pipe(styleguide.generate({
      title: <span class="hljs-string">"Varya.me Styleguide"</span>,
      appRoot: <span class="hljs-string">'/styleguide'</span>,
      ...
</code></pre>
<h3 id="providing-scripts">Providing scripts</h3>
<p>Under the <code>extraHead</code> parameter I list all the additions needed. Some of my components
need JavaScript to function. It is indeed possible to ignore that and present
their views only, but I wanted them to be exactly as they were used in the blog.
Thanks to <code>extraHead</code> I could supply any code needed. I used it to
link the same scripts that I have on my blog pages:</p>
<pre class="highlight"><code class="hljs javascript">gulp.task(<span class="hljs-string">"styleguide:generate"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{

  <span class="hljs-keyword">return</span> gulp.src([<span class="hljs-string">"desktop.blocks/**/*.css"</span>])
    .pipe(styleguide.generate({
      title: <span class="hljs-string">"Varya.me Styleguide"</span>,
      ...
      extraHead: [
        <span class="hljs-string">'&lt;script src="http://yandex.st/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;'</span>,
        <span class="hljs-string">'&lt;script src="/desktop.bundles/index/index.min.js"&gt;&lt;/script&gt;'</span>,
        ...
      ]
    ...
</code></pre>
<p>However, I needed yet another trick to make the scripts work properly. My components are written with <code>i-bem.js</code>
framework which automatically initialises them on the <code>domReady</code> event. This is what I wanted for the static pages because the
components markup is in HTML document. But for the Style Guide, which is architecturally a SPA, this did not work. The components
are rendered on the fly, and this obviously happens after <code>domReady</code>; that is why by default they stay
uninitialized. So they should be initialized after they had been rendered. Luckily, the Style Guide
triggers an event on the <code>window</code> object named <code>styleguide:onRendered</code> every time a new component is re-rendered.
By handling this event, I managed to get the components initialized right after they appear on the page. This code is needed
for the Style Guide only, so I do not include it into the project bundle but provide as an additional script in the
Style Guide configuration:</p>
<pre class="highlight"><code class="hljs r">gulp.task(<span class="hljs-string">"styleguide:generate"</span>, <span class="hljs-keyword">function</span>() {

  <span class="hljs-keyword">return</span> gulp.src([<span class="hljs-string">"desktop.blocks/**/*.css"</span>])
    .pipe(styleguide.generate({
      title: <span class="hljs-string">"Varya.me Styleguide"</span>,
      <span class="hljs-keyword">...</span>
      extraHead: [
        <span class="hljs-keyword">...</span>
        <span class="hljs-string">'&lt;script src="/styleguide/i-bem__init_styleguide.js"&gt;&lt;/script&gt;'</span>
      ]
    <span class="hljs-keyword">...</span>
</code></pre><p>You can check how the JavaScript components are working with the block which is initially empty and renders the list
of repositories after querying the GitHub API: <a href="http://varya.me/styleguide/#/section/4.3">varya.me/styleguide/#/section/4.3</a>.
Or try out the Candies randomly built with JavaScript <a href="http://varya.me/styleguide/#/section/5.1">varya.me/styleguide/#/section/5.1</a>.</p>
<p>The last important thing to make JavaScript work is to use <code>disableEncapsulation: true</code> parameter. Normally the
Style Guide wraps each component in the ShadowDOM because it lets us developers write component CSS without
worrying about affecting the Style Guide interface. But it also makes the components scoped from the JavaScript linked
to the Style Guide website — including that additional JavaScript I showed above. By disabling the encapsulation, I made
the components to be inserted into the HTML page as they are, without any scoping. As for affecting the Style Guide
interface, in my case it will never happen as I use BEM and all my components are already &quot;encapsulated&quot; thanks to that methodology.</p>
<h3 id="hosting-a-static-page">Hosting a static page</h3>
<p>The SC5 Style Guide provides a development server which routes all the paths to its root. When hosting it outside, you
should care about the routing yourself as you would do for any other SPA. But my blog is hosted on GitHub Pages
which is a simple static hosting and does not provide any routing capabilities. For managing this case, I use the
<code>disableHtml5Mode: true</code> option. It makes the Style Guide application generate the old-school links with <code>#</code>. And so it
works.</p>
<h2 id="documenting-the-components">Documenting the components</h2>
<p>As I used BEM for my website frontend from very beginning, the CSS was already written the component-way. I only
needed to create a descriptive structure and document the blocks with KSS.</p>
<h3 id="structuring-the-code">Structuring the code</h3>
<p>Unfortunately the BEM way of storing components in folders turned out to be not good enough to see
the code from the living-style-guide perspective. On a file system, all the components are represented at the same
level which turns them into a long list without much structure:</p>
<pre class="highlight"><code class="hljs r">desktop.blocks/
├── article
├── articles-list
├── box
├── <span class="hljs-keyword">...</span>
└── text
</code></pre><p><a href="https://github.com/varya/varya.github.com/tree/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks">github/varya/varya.github.com/desktop-blocks</a></p>
<p>In this case the atomic components are not distinct from the structural interface pieces (such as Header or Footer),
from the side blocks, or from CSS provided to style third-party things. Flat structure is indeed good for
bundling tools but we humans need more logical nesting.</p>
<p>For that I provide the <code>overview.css</code> file, which has nothing to do with the final product and only helps me arrange the
blocks. I have 5 sections, in which I place the blocks depending on what they are:</p>
<pre class="highlight"><code class="hljs r">/*
Atoms

Styleguide <span class="hljs-number">1</span>

styleguide:ignore:start

@import url(<span class="hljs-string">"logo/logo.css"</span>); // <span class="hljs-number">1.1</span>
@import url(<span class="hljs-string">"text/text.css"</span>); // <span class="hljs-number">1.2</span>
<span class="hljs-keyword">...</span>

styleguide:ignore:end
*/

/*
Main blocks

Styleguide <span class="hljs-number">2</span>

styleguide:ignore:start

@import url(<span class="hljs-string">"header/header.css"</span>); // <span class="hljs-number">2.1</span>
<span class="hljs-keyword">...</span>

styleguide:ignore:end
*/
</code></pre><p><a href="https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/overview.css">github/varya/varya.github.com/desktop-blocks/overview.css</a></p>
<p>There are only comments in this file in which I provide the documentation of every subset as a Style Guide section.
Listing the paths of the dependant CSS files makes it easier to navigate through the code. The <code>@import</code> syntax is used just
because :-)</p>
<p>The only trick here is the magic <code>styleguide:ignore:start</code> and <code>styleguide:ignore:end</code> keywords. It is possible to
place them inside comments in any piece of your CSS (or SASS or LESS) and make the Style Guide generator ignore 
what is in between.</p>
<p>In my case, I tell it skip my overview lists because they have nothing to do with the codebase. But the names of the
sections and their possible descriptions (I just haven&#39;t provided any) are in work.</p>
<h3 id="describing-the-pieces">Describing the pieces</h3>
<p>Everything else went smoothly. For every component I provided the KSS description. The <code>logo</code> block can be the
simplest example:</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-comment">/*

Logo

markup:
&lt;logo class="logo"&gt;···&lt;b class="var"&gt;var&lt;/b&gt;·&lt;b class="ya"&gt;ya&lt;/b&gt;;&lt;b class="cursor"&gt;&lt;/b&gt;&lt;/logo&gt;

Styleguide 1.1

*/</span>
<span class="hljs-class">.logo</span>
<span class="hljs-rules">{
<span class="hljs-rule"><span class="hljs-attribute">...
</span></span></span></code></pre>
<p><a href="https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/logo/logo.css">github/varya/varya.github.com/desktop-blocks/logo/logo.css</a></p>
<p>See it rendered: <a href="http://varya.me/styleguide/#/section/1.1">varya.me/styleguide/#/section/1.1</a></p>
<p>In some other components I used extra features. For example, different social icons are the same <code>ico</code> element with different
modifiers. In the Style Guide I could documents them all together:</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-comment">/*
Social icon

.social-ico__ico_type_rss         - RSS
.social-ico__ico_type_twitter     - Twitter
.social-ico__ico_type_github      - Github
.social-ico__ico_type_facebook    - Facebook
.social-ico__ico_type_linkedin    - LinkedIn

markup:
&lt;a class="link social-ico__ico {$modifiers}" href="#" title="Icon title"&gt;&lt;/a&gt;

Styleguide 1.5.1
*/</span>

<span class="hljs-class">.social-ico__ico</span>
<span class="hljs-rules">{
<span class="hljs-rule"><span class="hljs-attribute">...
</span></span></span></code></pre>
<p><a href="https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/social-ico/social-ico.css#L49">github/varya/varya.github.com/desktop-blocks/social-ico/social-ico.css</a></p>
<p>In the website the component is rendered separately with every modifier possible:
<a href="http://varya.me/styleguide/#/section/1.5.1">varya.me/styleguide/#/section/1.5.1</a></p>
<p>For the complex components which contain other ones I used <code>&lt;sg-insert&gt;</code> keyword. It takes another component&#39;s markup
by its reference number.</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-comment">/*
Sidebar
markup:
&lt;nav class="sidebar"&gt;
  &lt;sg-insert&gt;4.2&lt;/sg-insert&gt;
  &lt;sg-insert&gt;4.3&lt;/sg-insert&gt;
&lt;/nav&gt;
Styleguide 4.1
*/</span>

<span class="hljs-class">.sidebar</span>
<span class="hljs-rules">{
<span class="hljs-rule"><span class="hljs-attribute">...
</span></span></span></code></pre>
<p><a href="https://github.com/varya/varya.github.com/blob/af38b1fb0bd6e5a1b043d002ad5dbf107f17e6c1/desktop.blocks/sidebar/sidebar.css">github/varya/varya.github.com/desktop-blocks/sidebar/sidebar.css</a></p>
<p>This makes the markup examples pretty short, however it expands for rendering the component and showing the
markup on the website: <a href="http://varya.me/styleguide/#/section/4.1">varya.me/styleguide/#/section/4.1</a></p>
<h2 id="style-guide-driven-development">Style-Guide-Driven Development</h2>
<p>If you type &quot;logo&quot; in the Style Guide search field, it will find and render all the components where <code>logo</code> is found!
The search goes through all the CSS codebase. Similarly you can search for the components using <code>&lt;em&gt;</code> in their markup.
Or <code>font:</code> in their CSS.</p>
<p>I personally like that the search source is not only the CSS of components but also their markup examples. During the
refactorings this, for example, makes possible to select all the components containing inputs and look how the changes affect them.</p>
<p>However this is just a small addition to one major benefit I see in using the Style Guide. I find it far more important 
that <strong>it reveals my mistakes</strong>.</p>
<p>I already used the component way when building my blog. And I was pretty sure that my BEM experience is a 100%
guarantee that I get this right. But even developing with a highly modular approach in mind, I did this from the page perspective.
Before the components were integrated into the blog engine, I had developed a static page and this was where the
components fitted first.</p>
<p>I considered them independent and so tried to write my code. But <strong>sitting at the same page they never actually were
independent</strong>.</p>
<p>After the SC5 Style Guide magically represented each of them separately, I can see that the
<a href="http://varya.me/styleguide/#/section/1.1">logo</a> is aligned to the right.
And why should it be? Obviously, my mistake when I tried to made it fit into the Header.</p>
<p>The same goes for the <a href="http://varya.me/styleguide/#/section/1.4">language switcher</a> positioned on the right.</p>
<p>In the <a href="http://varya.me/styleguide/#/section/1.5">set of social icons</a>, the language switcher provided with the RSS
icon was considered to stay with it. But this only happens because at the blog pages
it is placed into a narrow container. The Style Guide represents it on its own and I can see that it is not that
flawless as I thought.</p>
<p>Such discoveries obviously lead to the refactoring :-)</p>
<p>To top it off, I must say that the experiment does not end and there are already findings for further
posts. Stay tuned!</p>
]]></description>
            <link>http://varya.me//en/posts/sc5-styleguide-for-smallers</link>
            <guid isPermaLink="true">http://varya.me//en/posts/sc5-styleguide-for-smallers</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Thu, 30 Jul 2015 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>